
name: 部署文档

on:
  push:
    branches:
      # 确保这是你正在使用的分支名称
      - master

jobs:
  deploy-gh-pages:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          # 如果你文档需要 Git 子模块，取消注释下一行
          # submodules: true



      - name: 设置 Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: yarn

      - name: 安装依赖
        run: yarn install --frozen-lockfile

      - name: 构建文档
        env:
          NODE_OPTIONS: --max_old_space_size=8192
        run: |-
          yarn run docs:build
          > docs/.vuepress/dist/.nojekyll

      - name: 部署文档
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          # 这是文档部署到的分支名称
          branch: gh-pages
          folder: docs/.vuepress/dist
      - name: 打包镜像, 上传 Docker Hub
        run: |
        # 登录docker, secrets.DOCKER_USERNMAE 就是我们在github上配置的docker的账户和密码
          docker login -u ${{secrets.DOCKER_USERNAME }} -p  ${{ secrets.DOCKER_PASSWORD }}
        # 打包镜像 -t参数给镜像命名 
        # .是基于当前目录的 Dockerfile 来构建镜像
          docker build --platform linux/amd64 -t ${{ secrets.DOCKER_USERNAME }}/deer-blog:latest  .
        # 推送到我们的 docker 镜像仓库
          docker push ${{ secrets.DOCKER_USERNAME }}/deer-blog:latest

      - name: 登录服务器, 执行脚本
        uses: appleboy/ssh-action@master
        with:
          host: 101.43.222.171
          username: elqpkdds
          password: 6e20d3f09bb0
          # 执行脚本
          script: |
          # 部署脚本 后面的vars是传递给脚本的参数
            deploy.sh ${{ vars.USER_NAME }} ${{ vars.IMAGE_NAME }} ${{ vars.PORT }} ${{ vars.CONTAINS_PORT }}

